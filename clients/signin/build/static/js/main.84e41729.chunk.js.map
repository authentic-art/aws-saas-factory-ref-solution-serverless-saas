{"version":3,"sources":["Themes/Colors.ts","Containers/DashboardContainer/index.tsx","Utils/constants.ts","Components/Styled/FormWrapper.tsx","Containers/LoginContainer/index.tsx","Containers/SignUpContainer/index.tsx","Components/Styled/FullWidthWrapper.tsx","Components/Styled/EmailConfirmFormWrapper.tsx","Containers/ConfirmEmailContainer/index.tsx","Containers/ForgotPasswordContainer/index.tsx","Containers/PasswordResetContainer/index.tsx","Utils/Helpers.ts","Navigation/PrivateRoute.tsx","Navigation/Routes.tsx","Components/App.tsx","global.ts","aws-exports.js","serviceWorker.ts","index.tsx"],"names":["colors","user","Auth","currentAuthenticatedUser","userRole","userEmail","Promise","resolve","then","value","console","log","attributes","withRouter","props","React","collapsed","setCollapsed","handleLogout","event","history","signOut","global","localStorage","removeItem","push","notification","error","message","className","id","Sider","trigger","collapsible","theme","mode","defaultSelectedKeys","Item","key","type","onClick","Header","style","background","padding","Content","margin","minHeight","FormWrapper","styled","Form","LoginContainer","state","loading","handleSubmit","preventDefault","form","validateFields","err","values","username","password","setState","signIn","from","location","pathname","setItem","signInUserSession","accessToken","jwtToken","success","description","placement","duration","catch","getFieldDecorator","this","onSubmit","rules","required","prefix","color","placeholder","gutter","lg","float","to","width","disabled","htmlType","indicator","fontSize","spin","create","schema","require","is","min","has","uppercase","lowercase","digits","symbols","SignUpContainer","confirmDirty","redirect","email","handleOpenNotification","title","onClose","validateFieldsAndScroll","fname","lname","role","signUp","name","handleConfirmBlur","currentTarget","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validationRulesErrors","validate","list","force","length","formatPasswordValidateError","errors","i","passwordPolicyContent","content","validator","onBlur","search","FullWidthWrapper","div","align","EmailConfirmFormWrapper","ConfirmEmailContainer","confirmationCode","confirmSignUp","handleOnPaste","code","clipboardData","getData","trim","RegExp","test","handleChange","split","md","validateStatus","help","label","size","onChange","onPaste","ForgotPasswordContainer","forgotPassword","data","PasswordResetContainer","handleBlur","forgotPasswordSubmit","jwtDecode","PrivateRoute","Component","component","rest","checkUserAuth","token","exp","Date","now","e","validateToken","getItem","render","AppRouter","exact","path","DashBoardContainer","App","GlobalStyles","createGlobalStyle","awsmobile","Boolean","window","hostname","match","Amplify","configure","awsconfig","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84e41729.chunk.js","sourcesContent":["export const colors = {\n  black: '#000000',\n  white: '#ffffff',\n  grey: '#ebedf0',\n  transparentBlack: 'rgba(0,0,0,.25)'\n};\n","import * as React from 'react';\nimport {Auth, JS} from 'aws-amplify';\n\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { Layout, Menu, Icon, notification } from 'antd';\n\n/** App Theme */\nimport { colors } from '../../Themes/Colors';\n\n/** App Constatns */\nimport { AUTH_USER_TOKEN_KEY } from '../../Utils/constants';\nimport { ClickParam } from 'antd/lib/menu';\n\nconst user = Auth.currentAuthenticatedUser()\nvar data=''\nvar userRole=''\nvar userEmail=''\nPromise.resolve(user).then(value=>{\n  console.log('value:',value)\n  data=value;\n  userRole=value.attributes['custom:role']\n  userEmail=value.attributes['email']\n\n  console.log(userEmail)\n  console.log(userRole)\n\n})\n\n\nconst DashBoardContainer: React.SFC<RouteComponentProps> = props => {\n  const [collapsed, setCollapsed] = React.useState(false);\n  const handleLogout = async (event: ClickParam) => {\n    const { history } = props;\n    try {\n\n      await Auth.signOut({ global: true }).then(() => {\n        localStorage.removeItem(AUTH_USER_TOKEN_KEY);\n        history.push('/login');\n      });\n    } catch (err) {\n      notification.error({ message: err.message });\n    }\n  };\n\n\n\n  return (\n\n    <Layout className=\"cover\" id=\"app-header\">\n\n      <Layout.Sider className=\"cover\" trigger={null} collapsible collapsed={collapsed}>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n          <Menu.Item key=\"1\">\n            <Icon type=\"home\" />\n            <span>Home</span>\n          </Menu.Item>\n          <Menu.Item key=\"2\">\n            <Icon type=\"setting\" />\n            <span>Settings</span>\n          </Menu.Item>\n          <Menu.Item key=\"3\" onClick={event => handleLogout(event)}>\n            <Icon type=\"logout\" />\n            <span>Logout</span>\n          </Menu.Item>\n        </Menu>\n      </Layout.Sider>\n      <Layout>\n        <Layout.Header style={{ background: colors.white, padding: 0 }}>\n          <Icon\n            className=\"trigger\"\n            onClick={() => setCollapsed(!collapsed)}\n            type={collapsed ? 'menu-unfold' : 'menu-fold'}\n          />\n        </Layout.Header>\n        <Layout.Content\n          style={{\n            margin: '24px 16px',\n            padding: 24,\n            background: colors.white,\n            minHeight: 280\n          }}\n        >\n          <div className=\"text-center\">\n            <h1>Hello : {userEmail}</h1>\n            <h3>Your role is : {userRole} </h3>\n\n\n          </div>\n        </Layout.Content>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default withRouter(DashBoardContainer);\n","/** Auth user token key */\nexport const AUTH_USER_TOKEN_KEY = 'ReactAmplify.TokenKey';\nexport const AUTH_ROLE = 'ReactAmplify.TokenKey';\n","import styled from 'styled-components';\nimport { Form } from 'antd';\n\n/** App Theme */\nimport { colors } from '../../Themes/Colors';\n\nconst FormWrapper = styled(Form)`\n  max-width: 350px;\n  border: 1px solid ${colors.grey};\n  margin: 7% auto !important;\n  padding: 42px 24px 50px !important;\n  background: ${colors.white};\n`;\n\nexport default FormWrapper;\n","import * as React from 'react';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Auth } from 'aws-amplify';\nimport { Form, Icon, Spin, Input, Button, notification, Col, Row } from 'antd';\n\n/** Presentational */\nimport FormWrapper from '../../Components/Styled/FormWrapper';\n\n/** App theme */\nimport { colors } from '../../Themes/Colors';\n\n/** App constants */\nimport { AUTH_USER_TOKEN_KEY } from '../../Utils/constants';\n\ntype Props = RouteComponentProps & {\n  form: any;\n};\n\ntype State = {\n  loading: boolean;\n};\n\nclass LoginContainer extends React.Component<Props, State> {\n  state = {\n    loading: false\n  };\n\n  handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    this.props.form.validateFields((err: Error, values: { username: string; password: string }) => {\n      if (!err) {\n        let { username, password } = values;\n\n        this.setState({ loading: true });\n\n        Auth.signIn(username, password)\n            .then(user => {\n              const { history, location } = this.props;\n              // @ts-ignore\n              const { from } = location.state || {\n                from: {\n                  pathname: '/dashboard'\n                }\n              };\n\n              localStorage.setItem(AUTH_USER_TOKEN_KEY, user.signInUserSession.accessToken.jwtToken);\n\n              notification.success({\n                message: 'Succesfully logged in!',\n                description: 'Logged in successfully, Redirecting you in a few!',\n                placement: 'topRight',\n                duration: 1.5\n              });\n\n              history.push(from);\n            })\n            .catch(err => {\n              notification.error({\n                message: 'Error',\n                description: err.message,\n                placement: 'topRight'\n              });\n\n              console.log(err);\n\n              this.setState({ loading: false });\n            });\n      }\n    });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const { loading } = this.state;\n\n    return (\n        <React.Fragment>\n          <FormWrapper onSubmit={this.handleSubmit} className=\"login-form\">\n            <Form.Item>\n              {getFieldDecorator('username', {\n                rules: [\n                  {\n                    required: true,\n                    message: 'Please input your username!'\n                  }\n                ]\n              })(\n                  <Input prefix={<Icon type=\"user\" style={{ color: colors.transparentBlack }} />} placeholder=\"Username\" />\n              )}\n            </Form.Item>\n            <Form.Item>\n              {getFieldDecorator('password', {\n                rules: [\n                  {\n                    required: true,\n                    message: 'Please input your password!'\n                  }\n                ]\n              })(\n                  <Input\n                      prefix={<Icon type=\"lock\" style={{ color: colors.transparentBlack }} />}\n                      type=\"password\"\n                      placeholder=\"Password\"\n                  />\n              )}\n            </Form.Item>\n            <Form.Item className=\"text-center\">\n              <Row type=\"flex\" gutter={16}>\n                <Col lg={24}>\n                  <Link style={{ float: 'right' }} className=\"login-form-forgot\" to=\"/forgot-password\">\n                    Forgot password\n                  </Link>\n                </Col>\n                <Col lg={24}>\n                  <Button\n                      style={{ width: '100%' }}\n                      type=\"primary\"\n                      disabled={loading}\n                      htmlType=\"submit\"\n                      className=\"login-form-button\"\n                  >\n                    {loading ? <Spin indicator={<Icon type=\"loading\" style={{ fontSize: 24 }} spin />} /> : 'Log in'}\n                  </Button>\n                </Col>\n                <Col lg={24}>\n                  Or <Link to=\"/signup\">register now!</Link>\n                </Col>\n              </Row>\n            </Form.Item>\n          </FormWrapper>\n        </React.Fragment>\n    );\n  }\n}\n\nexport default Form.create()(LoginContainer);","import * as React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { Auth } from 'aws-amplify';\nimport { Form, Input, Icon, Button, notification, Popover, Spin, Col, Row } from 'antd';\n\n/** Presentational */\nimport FormWrapper from '../../Components/Styled/FormWrapper';\n\n/** App theme */\nimport { colors } from '../../Themes/Colors';\n\ntype Props = {\n  form: any;\n};\n\ntype State = {\n  confirmDirty: boolean;\n  redirect: boolean;\n  loading: boolean;\n  email: string;\n};\n\ntype UserFormData = {\n  fname: string;\n  lname: string;\n  password: string;\n  email: string;\n  phoneNumber: number;\n  role: string;\n};\n\nconst passwordValidator = require('password-validator');\n\n// create a password schema\nconst schema = new passwordValidator();\n\nschema\n  .is()\n  .min(8)\n  .has()\n  .uppercase()\n  .has()\n  .lowercase()\n  .has()\n  .digits()\n  .has()\n  .symbols();\n\nclass SignUpContainer extends React.Component<Props, State> {\n  state = {\n    confirmDirty: false,\n    redirect: false,\n    loading: false,\n    email: ''\n  };\n\n  /**\n   * @param  {string} - type\n   * @param  {string} - title\n   * @param  {string} - message\n   *\n   * @returns {void} - no value returned\n   */\n  handleOpenNotification = (type: string, title: string, message: string): void => {\n    switch (type) {\n      case 'success':\n        notification['success']({\n          message: title,\n          description: message,\n          placement: 'topRight',\n          duration: 1.5,\n          onClose: () => {\n            this.setState({ redirect: true });\n          }\n        });\n        break;\n\n      case 'error':\n        notification['error']({\n          message: title,\n          description: message,\n          placement: 'topRight',\n          duration: 1.5\n        });\n        break;\n    }\n  };\n\n  handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    this.props.form.validateFieldsAndScroll((err: Error, values: UserFormData) => {\n      if (!err) {\n        let { fname, lname, password, email, role } = values;\n\n        // show loader\n        this.setState({ loading: true });\n\n        Auth.signUp({\n          username: email,\n          password,\n          attributes: {\n            'custom:role' : role,\n            email,\n            name: `${fname} ${lname}`,\n          }\n        })\n\n          .then(() => {\n            notification.success({\n              message: 'Succesfully signed up user!',\n              description: 'Account created successfully, Redirecting you in a few!',\n              placement: 'topRight',\n              duration: 1.5,\n              onClose: () => {\n                this.setState({ redirect: true });\n              }\n            });\n\n            this.setState({ email });\n          })\n          .catch(err => {\n            notification.error({\n              message: 'Error',\n              description: 'Error signing up user',\n              placement: 'topRight',\n              duration: 1.5\n            });\n\n            this.setState({\n              loading: false\n            });\n          });\n      }\n    });\n  };\n\n  handleConfirmBlur = (event: React.FormEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget;\n\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule: object, value: string, callback: (message?: string) => void) => {\n    const { form } = this.props;\n\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule: object, value: string, callback: (message?: string) => void) => {\n    const form = this.props.form;\n    const validationRulesErrors = schema.validate(value, { list: true });\n\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    if (validationRulesErrors.length > 0) {\n      callback(this.formatPasswordValidateError(validationRulesErrors));\n    }\n    callback();\n  };\n\n  formatPasswordValidateError = (errors: Array<string>) => {\n    for (let i = 0; i < errors.length; i++) {\n      if (errors[i] === 'min') {\n        return 'password length should be a at least 8 characters';\n      } else if (errors[i] === 'lowercase') {\n        return 'password should contain lowercase letters';\n      } else if (errors[i] === 'uppercase') {\n        return 'password should contain uppercase letters';\n      } else if (errors[i] === 'digits') {\n        return 'password should contain digits';\n      } else if (errors[i] === 'symbols') {\n        return 'password should contain symbols';\n      }\n    }\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const { redirect, loading } = this.state;\n\n    const title = 'Password Policy';\n    const passwordPolicyContent = (\n      <React.Fragment>\n        <h4>Your password should contain: </h4>\n        <ul>\n          <li>Minimum length of 8 characters</li>\n          <li>Numerical characters (0-9)</li>\n          <li>Special characters</li>\n          <li>Uppercase letter</li>\n          <li>Lowercase letter</li>\n        </ul>\n      </React.Fragment>\n    );\n\n    return (\n      <React.Fragment>\n        <FormWrapper onSubmit={this.handleSubmit}>\n          <Form.Item>\n            {getFieldDecorator('role', {\n              rules: [{ required: true, message: 'Missing role!' }]\n            })(<Input prefix={<Icon type=\"user\" style={{ color: colors.transparentBlack }} />} placeholder=\"Role\" />)}\n          </Form.Item>\n          <Form.Item>\n            {getFieldDecorator('fname', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please input your first name!'\n                }\n              ]\n            })(\n              <Input\n                prefix={<Icon type=\"user\" style={{ color: colors.transparentBlack }} />}\n                placeholder=\"First Name\"\n              />\n            )}\n          </Form.Item>\n          <Form.Item>\n            {getFieldDecorator('lname', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please input your last name!'\n                }\n              ]\n            })(\n              <Input prefix={<Icon type=\"user\" style={{ color: colors.transparentBlack }} />} placeholder=\"Last Name\" />\n            )}\n          </Form.Item>\n          <Form.Item>\n            {getFieldDecorator('email', {\n              rules: [{ required: true, message: 'Please input your email!' }]\n            })(<Input prefix={<Icon type=\"user\" style={{ color: colors.transparentBlack }} />} placeholder=\"Email\" />)}\n          </Form.Item>\n\n          <Form.Item>\n            <Popover placement=\"right\" title={title} content={passwordPolicyContent} trigger=\"focus\">\n              {getFieldDecorator('password', {\n                rules: [\n                  { required: true, message: 'Please input your Password!' },\n                  {\n                    validator: this.validateToNextPassword\n                  }\n                ]\n              })(\n                <Input\n                  prefix={<Icon type=\"lock\" style={{ color: colors.transparentBlack }} />}\n                  type=\"password\"\n                  placeholder=\"Password\"\n                />\n              )}\n            </Popover>\n          </Form.Item>\n          <Form.Item>\n            {getFieldDecorator('confirm', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please confirm your password!'\n                },\n                {\n                  validator: this.compareToFirstPassword\n                }\n              ]\n            })(\n              <Input\n                prefix={<Icon type=\"lock\" style={{ color: colors.transparentBlack }} />}\n                type=\"password\"\n                placeholder=\"Confirm Password\"\n                onBlur={this.handleConfirmBlur}\n              />\n            )}\n          </Form.Item>\n\n          <Form.Item className=\"text-center\">\n            <Row>\n              <Col lg={24}>\n                <Button style={{ width: '100%' }} type=\"primary\" disabled={loading} htmlType=\"submit\">\n                  {loading ? <Spin indicator={<Icon type=\"loading\" style={{ fontSize: 24 }} spin />} /> : 'Register'}\n                </Button>\n              </Col>\n              <Col lg={24}>\n                Or <Link to=\"/login\">login to your account!</Link>\n              </Col>\n            </Row>\n          </Form.Item>\n        </FormWrapper>\n        {redirect && (\n          <Redirect\n            to={{\n              pathname: '/verify-code',\n              search: `?email=${this.state.email}`\n            }}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Form.create()(SignUpContainer);\n","import styled from 'styled-components';\n\nconst FullWidthWrapper = styled.div`\n  position: relative;\n  display: flex;\n  width: 100%;\n  text-align: ${(props: { align?: string }) => (props.align ? props.align : '')};\n`;\n\nexport default FullWidthWrapper;\n","import styled from 'styled-components';\nimport { Form } from 'antd';\n\n/** App Theme */\nimport { colors } from '../../Themes/Colors';\n\nconst EmailConfirmFormWrapper = styled(Form)`\n  display: flex;\n  flex-flow: wrap row;\n  max-width: 50%;\n  width: 100%;\n  border: 1px solid ${colors.grey};\n  margin: 7% auto !important;\n  padding: 42px 24px 50px !important;\n  background: ${colors.white};\n  justify-content: space-around;\n\n  input {\n    text-align: center;\n  }\n`;\n\nexport default EmailConfirmFormWrapper;\n","import * as React from 'react';\nimport { Redirect, RouteComponentProps } from 'react-router-dom';\nimport { Spin, Icon, Button, Form, notification, Input, Col } from 'antd';\n\n// amplify\nimport { Auth } from 'aws-amplify';\n\n/** Presentational */\nimport FullWidthWrapper from '../../Components/Styled/FullWidthWrapper';\nimport EmailConfirmFormWrapper from '../../Components/Styled/EmailConfirmFormWrapper';\n\ntype State = {\n  username: string;\n  loading: boolean;\n  redirect: boolean;\n  confirmationCode: string;\n  error: string;\n};\n\nclass ConfirmEmailContainer extends React.Component<RouteComponentProps, State> {\n  state = {\n    username: '',\n    loading: false,\n    redirect: false,\n    confirmationCode: '',\n    error: ''\n  };\n\n  componentDidMount() {\n    if (this.props.location.search) {\n      // get username from url params\n      let username = this.props.location.search.split('=')[1];\n\n      this.setState({ username });\n    }\n  }\n\n  handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const { confirmationCode } = this.state;\n\n    // show progress spinner\n    this.setState({ loading: true });\n\n    Auth.confirmSignUp(this.state.username, confirmationCode)\n      .then(() => {\n        this.handleOpenNotification('success', 'Succesfully confirmed!', 'You will be redirected to login in a few!');\n      })\n      .catch(err => {\n        this.handleOpenNotification('error', 'Invalid code', err.message);\n        this.setState({\n          loading: false\n        });\n      });\n  };\n\n  /**\n   * @param  {string} - type\n   * @param  {string} - title\n   * @param  {string} - message\n   *\n   * @returns {void} - no value returned\n   */\n  handleOpenNotification = (type: string, title: string, message: string): void => {\n    switch (type) {\n      case 'success':\n        notification['success']({\n          message: title,\n          description: message,\n          placement: 'topRight',\n          duration: 1.5,\n          onClose: () => {\n            this.setState({ redirect: true });\n          }\n        });\n        break;\n\n      case 'error':\n        notification['error']({\n          message: title,\n          description: message,\n          placement: 'topRight',\n          duration: 1.5\n        });\n        break;\n    }\n  };\n\n  handleOnPaste = (event: React.ClipboardEvent) => {\n    event.preventDefault();\n\n    let code = event.clipboardData.getData('Text').trim();\n\n    /** Update input */\n    this.setState({ confirmationCode: code });\n\n    // regex to check if string is numbers only\n    const reg = new RegExp('^[0-9]+$');\n\n    if (reg.test(code) && code.length === 6) {\n      // code is a valid number\n\n      this.setState({ loading: true });\n\n      Auth.confirmSignUp(this.state.username, code)\n        .then(() => {\n          this.handleOpenNotification('success', 'Succesfully confirmed!', 'You will be redirected to login in a few!');\n        })\n        .catch(err => {\n          this.handleOpenNotification('error', 'Invalid code', err.message);\n          this.setState({\n            loading: false\n          });\n        });\n    }\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ confirmationCode: event.currentTarget.value });\n  };\n\n  render() {\n    const { loading, error, confirmationCode, redirect } = this.state;\n\n    return (\n      <FullWidthWrapper align=\"center\">\n        <EmailConfirmFormWrapper onSubmit={this.handleSubmit}>\n          <Col md={24} lg={18}>\n            <div className=\"full-width\">\n              <h2>Check your email</h2>\n              <p>We've sent a six­ digit confirmation code</p>\n            </div>\n            <Form.Item validateStatus={error && 'error'} help={error} label=\"Confirmation Code\">\n              <Input\n                size=\"large\"\n                type=\"number\"\n                placeholder=\"Enter confirmation code\"\n                onChange={this.handleChange}\n                onPaste={this.handleOnPaste}\n                value={confirmationCode}\n              />\n            </Form.Item>\n          </Col>\n          <Col md={24} lg={12}>\n            <Button type=\"primary\" disabled={loading} htmlType=\"submit\" size=\"large\">\n              {loading ? <Spin indicator={<Icon type=\"loading\" style={{ fontSize: 24 }} spin />} /> : 'Confirm Email'}\n            </Button>\n          </Col>\n        </EmailConfirmFormWrapper>\n        {redirect && <Redirect to={{ pathname: '/login' }} />}\n      </FullWidthWrapper>\n    );\n  }\n}\n\nexport default ConfirmEmailContainer;\n","import * as React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { Auth } from 'aws-amplify';\nimport { Form, Icon, Spin, Input, Button, notification, Row, Col } from 'antd';\n\n/** Presentational */\nimport FormWrapper from '../../Components/Styled/FormWrapper';\n\n/** App theme */\nimport { colors } from '../../Themes/Colors';\n\ntype Props = {\n  form: any;\n};\n\ntype State = {\n  username: string;\n  redirect: boolean;\n  loading: boolean;\n};\n\nclass ForgotPasswordContainer extends React.Component<Props, State> {\n  state = {\n    username: '',\n    redirect: false,\n    loading: false\n  };\n\n  handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    this.props.form.validateFields((err: { message: string }, values: { username: string }) => {\n      if (!err) {\n        let { username } = values;\n\n        this.setState({\n          loading: true,\n          username\n        });\n\n        Auth.forgotPassword(username)\n          .then(data => {\n            notification.success({\n              message: 'Redirecting you in a few!',\n              description: 'Account confirmed successfully!',\n              placement: 'topRight',\n              duration: 1.5,\n              onClose: () => {\n                this.setState({ redirect: true });\n              }\n            });\n          })\n          .catch(err => {\n            notification.error({\n              message: 'User confirmation failed',\n              description: err.message,\n              placement: 'topRight',\n              duration: 1.5\n            });\n            this.setState({ loading: false });\n          });\n      }\n    });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const { loading, redirect, username } = this.state;\n\n    return (\n      <React.Fragment>\n        <FormWrapper onSubmit={this.handleSubmit} className=\"login-form\">\n          <Form.Item>\n            {getFieldDecorator('username', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please input your username!'\n                }\n              ]\n            })(\n              <Input prefix={<Icon type=\"user\" style={{ color: colors.transparentBlack }} />} placeholder=\"Username\" />\n            )}\n          </Form.Item>\n          <Form.Item className=\"text-center\">\n            <Row>\n              <Col lg={24}>\n                <Button style={{ width: '100%' }} type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                  {loading ? (\n                    <Spin indicator={<Icon type=\"loading\" style={{ fontSize: 24 }} spin />} />\n                  ) : (\n                    'Confirm username'\n                  )}\n                </Button>\n              </Col>\n              <Col lg={24}>\n                <Link to=\"/login\">Ooh! Wait! I've remembered!</Link>\n              </Col>\n            </Row>\n          </Form.Item>\n        </FormWrapper>\n        {redirect && (\n          <Redirect\n            to={{\n              pathname: '/reset-password',\n              search: `?username=${username}`\n            }}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Form.create()(ForgotPasswordContainer);\n","import * as React from 'react';\nimport { Redirect, RouteComponentProps } from 'react-router-dom';\nimport { Auth } from 'aws-amplify';\nimport { Form, Input, Icon, Button, notification, Popover, Spin, Row, Col } from 'antd';\n\n/** App theme */\nimport { colors } from '../../Themes/Colors';\nimport FormWrapper from '../../Components/Styled/FormWrapper';\n\ntype Props = RouteComponentProps & {\n  form: any;\n};\n\ntype State = {\n  confirmDirty: boolean;\n  redirect: boolean;\n  loading: boolean;\n};\n\nclass PasswordResetContainer extends React.Component<Props, State> {\n  state = {\n    confirmDirty: false,\n    redirect: false,\n    loading: false\n  };\n\n  handleBlur = (event: React.FormEvent<HTMLInputElement>) => {\n    const value = event.currentTarget.value;\n\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule: object, value: string, callback: (message?: string) => void) => {\n    const form = this.props.form;\n\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule: object, value: string, callback: (message?: string) => void) => {\n    const form = this.props.form;\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  };\n\n  handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    this.props.form.validateFieldsAndScroll((err: Error, values: { password: string; code: string }) => {\n      if (!err) {\n        let { password, code } = values;\n        let username = this.props.location.search.split('=')[1];\n\n        Auth.forgotPasswordSubmit(username.trim(), code.trim(), password.trim())\n          .then(() => {\n            notification.success({\n              message: 'Success!',\n              description: 'Password reset successful, Redirecting you in a few!',\n              placement: 'topRight',\n              duration: 1.5,\n              onClose: () => {\n                this.setState({ redirect: true });\n              }\n            });\n          })\n          .catch(err => {\n            notification['error']({\n              message: 'Error reseting password',\n              description: err.message,\n              placement: 'topRight',\n              duration: 1.5\n            });\n\n            this.setState({ loading: false });\n          });\n\n        // show loader\n        this.setState({ loading: true });\n      }\n    });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const { redirect, loading } = this.state;\n\n    const title = 'Password Policy';\n    const passwordPolicyContent = (\n      <React.Fragment>\n        <h4>Your password should contain: </h4>\n        <ul>\n          <li>Minimum length of 8 characters</li>\n          <li>Numerical characters (0-9)</li>\n          <li>Special characters</li>\n          <li>Uppercase letter</li>\n          <li>Lowercase letter</li>\n        </ul>\n      </React.Fragment>\n    );\n\n    return (\n      <React.Fragment>\n        <FormWrapper onSubmit={this.handleSubmit}>\n          <div className=\"text-center\">\n            <p>Check your email for the confirmation code</p>\n          </div>\n          <Form.Item>\n            <Row>\n              <Col lg={24}>\n                {getFieldDecorator('code', {\n                  rules: [\n                    {\n                      required: true,\n                      message: 'Please input your confirmation code!'\n                    }\n                  ]\n                })(\n                  <Input\n                    prefix={<Icon type=\"lock\" style={{ color: colors.transparentBlack }} />}\n                    placeholder=\"Enter your verification code\"\n                  />\n                )}\n              </Col>\n            </Row>\n          </Form.Item>\n\n          <Form.Item>\n            <Popover placement=\"right\" title={title} content={passwordPolicyContent} trigger=\"focus\">\n              {getFieldDecorator('password', {\n                rules: [\n                  { required: true, message: 'Please input your Password!' },\n                  {\n                    validator: this.validateToNextPassword\n                  }\n                ]\n              })(\n                <Input\n                  prefix={<Icon type=\"lock\" style={{ color: colors.transparentBlack }} />}\n                  type=\"password\"\n                  placeholder=\"New Password\"\n                />\n              )}\n            </Popover>\n          </Form.Item>\n\n          <Form.Item>\n            <Row>\n              <Col lg={24}>\n                {getFieldDecorator('confirm', {\n                  rules: [\n                    {\n                      required: true,\n                      message: 'Please confirm your password!'\n                    },\n                    {\n                      validator: this.compareToFirstPassword\n                    }\n                  ]\n                })(\n                  <Input\n                    prefix={<Icon type=\"lock\" style={{ color: colors.transparentBlack }} />}\n                    type=\"password\"\n                    placeholder=\"Confirm Password\"\n                    onBlur={this.handleBlur}\n                  />\n                )}\n              </Col>\n            </Row>\n          </Form.Item>\n\n          <Form.Item className=\"text-center\">\n            <Row>\n              <Col lg={24}>\n                <Button style={{ width: '100%' }} type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                  {loading ? (\n                    <Spin indicator={<Icon type=\"loading\" style={{ fontSize: 24 }} spin />} />\n                  ) : (\n                    'Confirm username'\n                  )}\n                </Button>\n              </Col>\n            </Row>\n          </Form.Item>\n        </FormWrapper>\n        {redirect && <Redirect to={{ pathname: '/login' }} />}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Form.create()(PasswordResetContainer);\n","const jwtDecode = require('jwt-decode');\n\n/**\n * helper method to validate  user token\n *\n * @param {*} token\n * @returns {boolean}\n */\nexport const validateToken = (token: any): boolean => {\n  if (!token) {\n    return false;\n  }\n  try {\n    const decodedJwt: any = jwtDecode(token);\n    return decodedJwt.exp >= Date.now() / 1000;\n  } catch (e) {\n    return false;\n  }\n};\n","import * as React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\n/** Helpers */\nimport { validateToken } from '../Utils/Helpers';\n\n/** Constants */\nimport { AUTH_USER_TOKEN_KEY } from '../Utils/constants';\n\nconst PrivateRoute = ({ component: Component, ...rest }: any & { component: any }) => {\n  const checkUserAuth = validateToken(localStorage.getItem(AUTH_USER_TOKEN_KEY));\n\n  return (\n    <Route\n      {...rest}\n      render={props => {\n        return checkUserAuth ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/login'\n            }}\n          />\n        );\n      }}\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import * as React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\n/** Container components */\nimport DashBoardContainer from '../Containers/DashboardContainer';\nimport LoginContainer from '../Containers/LoginContainer';\nimport SignUpContainer from '../Containers/SignUpContainer';\nimport ConfirmEmailContainer from '../Containers/ConfirmEmailContainer';\nimport ForgotPasswordContainer from '../Containers/ForgotPasswordContainer';\nimport PasswordResetContainer from '../Containers/PasswordResetContainer';\n\n/** private route component */\nimport PrivateRoute from './PrivateRoute';\n\nclass AppRouter extends React.Component {\n  render() {\n    return (\n      <Router>\n        <React.Fragment>\n          <PrivateRoute exact={true} path=\"/dashboard\" component={DashBoardContainer} />\n          <Route exact={true} path=\"/\" component={LoginContainer} />\n          <Route exact={true} path=\"/login\" component={LoginContainer} />\n          <Route exact={true} path=\"/signup\" component={SignUpContainer} />\n          <Route exact={true} path=\"/verify-code\" component={ConfirmEmailContainer} />\n          <Route exact={true} path=\"/reset-password\" component={PasswordResetContainer} />\n          <Route exact={true} path=\"/forgot-password\" component={ForgotPasswordContainer} />\n        </React.Fragment>\n      </Router>\n    );\n  }\n}\n\nexport default AppRouter;\n","import * as React from 'react';\n\n/** Components */\nimport AppRouter from '../Navigation/Routes';\n\n/** Ant design stylesheet */\nimport 'antd/dist/antd.css';\n\nconst App: React.FC = () => {\n  return <AppRouter />;\n};\n\nexport default App;\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    body {\n      margin: 0;\n      padding: 0;\n      width: 100%;\n      height: 100%;\n    }\n    #root {\n      position: relative;\n      width: 100%;\n      height: 100%;\n    }\n    #root > section {\n      position: relative;\n      width: 100%;\n      height: 100%;\n    }\n  }\n`;\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_NQZxVWV0K\",\n    \"aws_user_pools_web_client_id\": \"6eace8rhlp55aov213fkkarpom\",\n    \"oauth\": {},\n    \"aws_cognito_username_attributes\": [\n        \"EMAIL\"\n    ],\n    \"aws_cognito_social_providers\": [],\n    \"aws_cognito_signup_attributes\": [\n        \"EMAIL\"\n    ],\n    \"aws_cognito_mfa_configuration\": \"OFF\",\n    \"aws_cognito_mfa_types\": [\n        \"SMS\"\n    ],\n    \"aws_cognito_password_protection_settings\": {\n        \"passwordPolicyMinLength\": 8,\n        \"passwordPolicyCharacters\": []\n    },\n    \"aws_cognito_verification_mechanisms\": [\n        \"EMAIL\"\n    ],\n    \"aws_cloud_logic_custom\": [\n        {\n            \"name\": \"AdminQueries\",\n            \"endpoint\": \"https://n3jj3que69.execute-api.us-east-1.amazonaws.com/dev\",\n            \"region\": \"us-east-1\"\n        }\n    ],\n    \"aws_content_delivery_bucket\": \"unipalite-20220524154419-hostingbucket-dev\",\n    \"aws_content_delivery_bucket_region\": \"us-east-1\",\n    \"aws_content_delivery_url\": \"http://unipalite-20220524154419-hostingbucket-dev.s3-website-us-east-1.amazonaws.com\"\n};\n\n\nexport default awsmobile;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport Amplify from 'aws-amplify';\n\n/** Presentational */\nimport App from './Components/App';\nimport { GlobalStyles } from './global';\n\n/** Amplify config */\nimport awsconfig from './aws-exports';\n\n/** Service worker */\nimport * as serviceWorker from './serviceWorker';\n\n/** Configure amplify */\nAmplify.configure(awsconfig);\n\nReactDOM.render(\n    <>\n        <GlobalStyles />\n        <App />\n    </>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}