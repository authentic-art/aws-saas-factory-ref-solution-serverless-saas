{"ast":null,"code":"module.exports = function (method, arg, inverted) {\n  const msgList = inverted ? negativeMessages : positiveMessages;\n  return msgList[method] && msgList[method](arg);\n};\n\nconst positiveMessages = {\n  min: num => `The string should have a minimum length of ${num} character${pluralify(num)}`,\n  max: num => `The string should have a maximum length of ${num} character${pluralify(num)}`,\n  letters: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `The string should have a minimum of ${num} letter${pluralify(num)}`;\n  },\n  digits: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `The string should have a minimum of ${num} digit${pluralify(num)}`;\n  },\n  uppercase: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `The string should have a minimum of ${num} uppercase letter${pluralify(num)}`;\n  },\n  lowercase: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `The string should have a minimum of ${num} lowercase letter${pluralify(num)}`;\n  },\n  symbols: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `The string should have a minimum of ${num} symbol${pluralify(num)}`;\n  },\n  spaces: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `The string should have a minimum of ${num} space${pluralify(num)}`;\n  },\n  oneOf: list => `The string should be ${list.length > 1 ? `one of ${list.slice(0, -1).join(', ')} and ` : ''}${list[list.length - 1]}`,\n  has: pattern => `The string should have pattern '${pattern}'`,\n  not: pattern => `The string should not have pattern '${pattern}'`,\n  usingPlugin: fn => `The string should not violate ${fn.name || 'plugin'}`\n};\nconst negativeMessages = {\n  min: num => `The string should have a maximum length of ${num} character${pluralify(num)}`,\n  max: num => `The string should have a minimum length of ${num} character${pluralify(num)}`,\n  letters: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} letter${pluralify(num)}`;\n  },\n  digits: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} digit${pluralify(num)}`;\n  },\n  uppercase: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} uppercase letter${pluralify(num)}`;\n  },\n  lowercase: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} lowercase letter${pluralify(num)}`;\n  },\n  symbols: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} symbol${pluralify(num)}`;\n  },\n  spaces: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} space${pluralify(num)}`;\n  },\n  oneOf: list => `The string should not be ${list.length > 1 ? `one of ${list.slice(0, -1).join(', ')} and ` : ''}${list[list.length - 1]}`,\n  has: pattern => `The string should not have pattern '${pattern}'`,\n  not: pattern => `The string should have pattern '${pattern}'`,\n  usingPlugin: fn => `The string should violate ${fn.name || 'plugin'}`\n};\n\nfunction pluralify(num) {\n  return num === 1 ? '' : 's';\n}","map":null,"metadata":{},"sourceType":"script"}