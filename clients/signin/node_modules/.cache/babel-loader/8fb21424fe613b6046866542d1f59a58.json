{"ast":null,"code":"var _jsxFileName = \"/Users/l1/WebstormProjects/authentic_art_saas/clients/signin/src/Containers/ConfirmEmailContainer/index.tsx\";\nimport * as React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Spin, Icon, Button, Form, notification, Input, Col } from 'antd'; // amplify\n\nimport { Auth } from 'aws-amplify';\n/** Presentational */\n\nimport FullWidthWrapper from '../../Components/Styled/FullWidthWrapper';\nimport EmailConfirmFormWrapper from '../../Components/Styled/EmailConfirmFormWrapper';\n\nclass ConfirmEmailContainer extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      username: '',\n      loading: false,\n      redirect: false,\n      confirmationCode: '',\n      error: ''\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const {\n        confirmationCode\n      } = this.state; // show progress spinner\n\n      this.setState({\n        loading: true\n      });\n      Auth.confirmSignUp(this.state.username, confirmationCode).then(() => {\n        this.handleOpenNotification('success', 'Succesfully confirmed!', 'You will be redirected to login in a few!');\n      }).catch(err => {\n        this.handleOpenNotification('error', 'Invalid code', err.message);\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.handleOpenNotification = (type, title, message) => {\n      switch (type) {\n        case 'success':\n          notification['success']({\n            message: title,\n            description: message,\n            placement: 'topRight',\n            duration: 1.5,\n            onClose: () => {\n              this.setState({\n                redirect: true\n              });\n            }\n          });\n          break;\n\n        case 'error':\n          notification['error']({\n            message: title,\n            description: message,\n            placement: 'topRight',\n            duration: 1.5\n          });\n          break;\n      }\n    };\n\n    this.handleOnPaste = event => {\n      event.preventDefault();\n      let code = event.clipboardData.getData('Text').trim();\n      /** Update input */\n\n      this.setState({\n        confirmationCode: code\n      }); // regex to check if string is numbers only\n\n      const reg = new RegExp('^[0-9]+$');\n\n      if (reg.test(code) && code.length === 6) {\n        // code is a valid number\n        this.setState({\n          loading: true\n        });\n        Auth.confirmSignUp(this.state.username, code).then(() => {\n          this.handleOpenNotification('success', 'Succesfully confirmed!', 'You will be redirected to login in a few!');\n        }).catch(err => {\n          this.handleOpenNotification('error', 'Invalid code', err.message);\n          this.setState({\n            loading: false\n          });\n        });\n      }\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        confirmationCode: event.currentTarget.value\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.location.search) {\n      // get username from url params\n      let username = this.props.location.search.split('=')[1];\n      this.setState({\n        username\n      });\n    }\n  }\n\n  render() {\n    const {\n      loading,\n      error,\n      confirmationCode,\n      redirect\n    } = this.state;\n    return /*#__PURE__*/React.createElement(FullWidthWrapper, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(EmailConfirmFormWrapper, {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 24,\n      lg: 18,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"full-width\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 15\n      }\n    }, \"Check your email\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 15\n      }\n    }, \"We've sent a six\\xAD digit confirmation code\")), /*#__PURE__*/React.createElement(Form.Item, {\n      validateStatus: error && 'error',\n      help: error,\n      label: \"Confirmation Code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      size: \"large\",\n      type: \"number\",\n      placeholder: \"Enter confirmation code\",\n      onChange: this.handleChange,\n      onPaste: this.handleOnPaste,\n      value: confirmationCode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: 24,\n      lg: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      disabled: loading,\n      htmlType: \"submit\",\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }, loading ? /*#__PURE__*/React.createElement(Spin, {\n      indicator: /*#__PURE__*/React.createElement(Icon, {\n        type: \"loading\",\n        style: {\n          fontSize: 24\n        },\n        spin: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 43\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 26\n      }\n    }) : 'Confirm Email'))), redirect && /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: '/login'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 22\n      }\n    }));\n  }\n\n}\n\nexport default ConfirmEmailContainer;","map":{"version":3,"names":["React","Redirect","Spin","Icon","Button","Form","notification","Input","Col","Auth","FullWidthWrapper","EmailConfirmFormWrapper","ConfirmEmailContainer","Component","state","username","loading","redirect","confirmationCode","error","handleSubmit","event","preventDefault","setState","confirmSignUp","then","handleOpenNotification","catch","err","message","type","title","description","placement","duration","onClose","handleOnPaste","code","clipboardData","getData","trim","reg","RegExp","test","length","handleChange","currentTarget","value","componentDidMount","props","location","search","split","render","fontSize","pathname"],"sources":["/Users/l1/WebstormProjects/authentic_art_saas/clients/signin/src/Containers/ConfirmEmailContainer/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Redirect, RouteComponentProps } from 'react-router-dom';\nimport { Spin, Icon, Button, Form, notification, Input, Col } from 'antd';\n\n// amplify\nimport { Auth } from 'aws-amplify';\n\n/** Presentational */\nimport FullWidthWrapper from '../../Components/Styled/FullWidthWrapper';\nimport EmailConfirmFormWrapper from '../../Components/Styled/EmailConfirmFormWrapper';\n\ntype State = {\n  username: string;\n  loading: boolean;\n  redirect: boolean;\n  confirmationCode: string;\n  error: string;\n};\n\nclass ConfirmEmailContainer extends React.Component<RouteComponentProps, State> {\n  state = {\n    username: '',\n    loading: false,\n    redirect: false,\n    confirmationCode: '',\n    error: ''\n  };\n\n  componentDidMount() {\n    if (this.props.location.search) {\n      // get username from url params\n      let username = this.props.location.search.split('=')[1];\n\n      this.setState({ username });\n    }\n  }\n\n  handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const { confirmationCode } = this.state;\n\n    // show progress spinner\n    this.setState({ loading: true });\n\n    Auth.confirmSignUp(this.state.username, confirmationCode)\n      .then(() => {\n        this.handleOpenNotification('success', 'Succesfully confirmed!', 'You will be redirected to login in a few!');\n      })\n      .catch(err => {\n        this.handleOpenNotification('error', 'Invalid code', err.message);\n        this.setState({\n          loading: false\n        });\n      });\n  };\n\n  /**\n   * @param  {string} - type\n   * @param  {string} - title\n   * @param  {string} - message\n   *\n   * @returns {void} - no value returned\n   */\n  handleOpenNotification = (type: string, title: string, message: string): void => {\n    switch (type) {\n      case 'success':\n        notification['success']({\n          message: title,\n          description: message,\n          placement: 'topRight',\n          duration: 1.5,\n          onClose: () => {\n            this.setState({ redirect: true });\n          }\n        });\n        break;\n\n      case 'error':\n        notification['error']({\n          message: title,\n          description: message,\n          placement: 'topRight',\n          duration: 1.5\n        });\n        break;\n    }\n  };\n\n  handleOnPaste = (event: React.ClipboardEvent) => {\n    event.preventDefault();\n\n    let code = event.clipboardData.getData('Text').trim();\n\n    /** Update input */\n    this.setState({ confirmationCode: code });\n\n    // regex to check if string is numbers only\n    const reg = new RegExp('^[0-9]+$');\n\n    if (reg.test(code) && code.length === 6) {\n      // code is a valid number\n\n      this.setState({ loading: true });\n\n      Auth.confirmSignUp(this.state.username, code)\n        .then(() => {\n          this.handleOpenNotification('success', 'Succesfully confirmed!', 'You will be redirected to login in a few!');\n        })\n        .catch(err => {\n          this.handleOpenNotification('error', 'Invalid code', err.message);\n          this.setState({\n            loading: false\n          });\n        });\n    }\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ confirmationCode: event.currentTarget.value });\n  };\n\n  render() {\n    const { loading, error, confirmationCode, redirect } = this.state;\n\n    return (\n      <FullWidthWrapper align=\"center\">\n        <EmailConfirmFormWrapper onSubmit={this.handleSubmit}>\n          <Col md={24} lg={18}>\n            <div className=\"full-width\">\n              <h2>Check your email</h2>\n              <p>We've sent a six­ digit confirmation code</p>\n            </div>\n            <Form.Item validateStatus={error && 'error'} help={error} label=\"Confirmation Code\">\n              <Input\n                size=\"large\"\n                type=\"number\"\n                placeholder=\"Enter confirmation code\"\n                onChange={this.handleChange}\n                onPaste={this.handleOnPaste}\n                value={confirmationCode}\n              />\n            </Form.Item>\n          </Col>\n          <Col md={24} lg={12}>\n            <Button type=\"primary\" disabled={loading} htmlType=\"submit\" size=\"large\">\n              {loading ? <Spin indicator={<Icon type=\"loading\" style={{ fontSize: 24 }} spin />} /> : 'Confirm Email'}\n            </Button>\n          </Col>\n        </EmailConfirmFormWrapper>\n        {redirect && <Redirect to={{ pathname: '/login' }} />}\n      </FullWidthWrapper>\n    );\n  }\n}\n\nexport default ConfirmEmailContainer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}