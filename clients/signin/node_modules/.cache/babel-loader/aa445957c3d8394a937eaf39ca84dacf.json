{"ast":null,"code":"var _classCallCheck = require(\"/Users/l1/WebstormProjects/Amplify-AA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/l1/WebstormProjects/Amplify-AA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/* eslint-disable no-unused-vars */\nvar lib = require('./lib');\n\nvar error = require('./constants').error;\n\nvar getValidationMessage = require('./validationMessages');\n/**\n * Validates that a number is a valid length (positive number)\n *\n * @private\n * @param {number} num - Number to validate\n */\n\n\nfunction _validateLength(num) {\n  var len = Number(num);\n\n  if (isNaN(len) || !Number.isInteger(len) || len < 1) {\n    throw new Error(error.length);\n  }\n}\n/**\n * Tests a validation and return the result\n *\n * @private\n * @param {string} property - Property to validate\n * @returns {boolean} Boolean value indicting the validity\n *           of the password against the property\n */\n\n\nfunction _isPasswordValidFor(property) {\n  return lib[property.method].apply(this, property.arguments);\n}\n/**\n * Registers the properties of a password-validation schema object\n *\n * @private\n * @param {string} method - Property name\n * @param {array} arguments - arguments for the func property\n * @returns {PasswordValidator}\n */\n\n\nfunction _register(method, args, description) {\n  // Add property to the schema\n  this.properties.push({\n    method: method,\n    arguments: args,\n    description: description\n  });\n  return this;\n}\n\nvar PasswordValidator = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Creates a password-validator schema\n   *\n   * @constructor\n   */\n  function PasswordValidator() {\n    _classCallCheck(this, PasswordValidator);\n\n    this.properties = [];\n  }\n  /**\n   * Method to validate the password against schema\n   *\n   * @param {string} pwd - password to validate\n   * @param {object} [options] - optional options to configure validation\n   * @param {boolean} [options.list] - asks for a list of validation\n   *           failures instead of just true/false\n   * @param {boolean} [options.details] - asks for more details about\n   *           failed validations including arguments, and error messages\n   * @returns {boolean|array} Boolean value indicting the validity\n   *           of the password as per schema, if 'options.list' or\n   *           'options.details' is not set. Otherwise, it returns an\n   *           array of property names which failed validations\n   */\n\n\n  _createClass(PasswordValidator, [{\n    key: \"validate\",\n    value: function validate(pwd, options) {\n      var _this = this;\n\n      this.list = Boolean(options && options.list);\n      this.details = Boolean(options && options.details);\n      this.password = String(pwd);\n      this.positive = true;\n\n      if (this.list || this.details) {\n        return this.properties.reduce(function (errorList, property) {\n          // Applies all validations defined in lib one by one\n          if (!_isPasswordValidFor.call(_this, property)) {\n            // If the validation for a property fails,\n            // add it to the error list\n            var detail = property.method; // If the details option was provided,\n            // return a rich object including validation message\n\n            if (_this.details) {\n              detail = {\n                validation: property.method\n              };\n\n              if (property.arguments && property.arguments[0]) {\n                detail.arguments = property.arguments[0];\n              }\n\n              if (!_this.positive && property.method !== 'not') {\n                detail.inverted = true;\n              }\n\n              var description = property.arguments && property.arguments[1];\n              var validationMessage = description || getValidationMessage(property.method, detail.arguments, detail.inverted);\n              detail.message = validationMessage;\n            }\n\n            return errorList.concat(detail);\n          }\n\n          return errorList;\n        }, []);\n      }\n\n      return this.properties.every(_isPasswordValidFor.bind(this));\n    }\n    /**\n     * Rule to mandate the presence of letters in the password\n     *\n     * @param {number} [count] - minimum number of letters required\n     * @param {string} [description] - description of the validation\n     * @returns {PasswordValidator} instance of PasswordValidator schema\n     */\n\n  }, {\n    key: \"letters\",\n    value: function letters(count, description) {\n      count && _validateLength(count);\n      return _register.call(this, 'letters', arguments);\n    }\n    /**\n     * Rule to mandate the presence of digits in the password\n     *\n     * @param {number} [count] - minimum number of digits required\n     * @param {string} [description] - description of the validation\n     * @returns {PasswordValidator} instance of PasswordValidator schema\n     */\n\n  }, {\n    key: \"digits\",\n    value: function digits(count, description) {\n      count && _validateLength(count);\n      return _register.call(this, 'digits', arguments);\n    }\n    /**\n     * Rule to mandate the presence of symbols in the password\n     *\n     * @param {number} [count] - minimum number of symbols required\n     * @param {string} [description] - description of the validation\n     * @returns {PasswordValidator} instance of PasswordValidator schema\n     */\n\n  }, {\n    key: \"symbols\",\n    value: function symbols(count, description) {\n      count && _validateLength(count);\n      return _register.call(this, 'symbols', arguments);\n    }\n    /**\n     * Rule to specify a minimum length of the password\n     *\n     * @param {number} num - minimum length\n     * @param {string} [description] - description of the validation\n     * @returns {PasswordValidator} instance of PasswordValidator schema\n     */\n\n  }, {\n    key: \"min\",\n    value: function min(num, description) {\n      _validateLength(num);\n\n      return _register.call(this, 'min', arguments);\n    }\n    /**\n     * Rule to specify a maximum length of the password\n     *\n     * @param {number} num - maximum length\n     * @param {string} [description] - description of the validation\n     * @returns {PasswordValidator} instance of PasswordValidator schema\n     */\n\n  }, {\n    key: \"max\",\n    value: function max(num, description) {\n      _validateLength(num);\n\n      return _register.call(this, 'max', arguments);\n    }\n    /**\n     * Rule to mandate the presence of lowercase letters in the password\n     *\n     * @param {number} [count] - minimum number of lowercase letters required\n     * @param {string} [description] - description of the validation\n     * @returns {PasswordValidator} instance of PasswordValidator schema\n     */\n\n  }, {\n    key: \"lowercase\",\n    value: function lowercase(count, description) {\n      count && _validateLength(count);\n      return _register.call(this, 'lowercase', arguments);\n    }\n    /**\n     * Rule to mandate the presence of uppercase letters in the password\n     *\n     * @param {number} [count] - minimum number of uppercase letters required\n     * @param {string} [description] - description of the validation\n     * @returns {PasswordValidator} instance of PasswordValidator schema\n     */\n\n  }, {\n    key: \"uppercase\",\n    value: function uppercase(count, description) {\n      count && _validateLength(count);\n      return _register.call(this, 'uppercase', arguments);\n    }\n    /**\n     * Rule to mandate the presence of space in the password\n     * It can be used along with 'not' to not allow spaces\n     * in the password\n     *\n     * @param {number} [count] - minimum number of spaces required\n     * @param {string} [description] - description of the validation\n     * @returns {PasswordValidator} instance of PasswordValidator schema\n     */\n\n  }, {\n    key: \"spaces\",\n    value: function spaces(count, description) {\n      count && _validateLength(count);\n      return _register.call(this, 'spaces', arguments);\n    }\n    /**\n     * Rule to invert the effects of 'not'\n     * Apart from that, 'has' is also used\n     * to make the api readable and chainable\n     *\n     * @param {string|RegExp} [pattern] - pattern to match\n     * @param {string} [description] - description of the validation\n     * @returns {PasswordValidator} instance of PasswordValidator schema\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(pattern, description) {\n      return _register.call(this, 'has', arguments);\n    }\n    /**\n     * Rule to invert the next applied rules.\n     * All the rules applied after 'not' will have opposite effect,\n     * until 'has' rule is applied\n     *\n     * @param {string|RegExp} [pattern] - pattern to not match\n     * @param {string} [description] - description of the validation\n     * @returns {PasswordValidator} instance of PasswordValidator schema\n     */\n\n  }, {\n    key: \"not\",\n    value: function not(pattern, description) {\n      return _register.call(this, 'not', arguments);\n    }\n    /**\n     * Rule to invert the effects of 'not'\n     * Apart from that, 'is' is also used\n     * to make the api readable and chainable\n     *\n     * @returns {PasswordValidator} instance of PasswordValidator schema\n     */\n\n  }, {\n    key: \"is\",\n    value: function is() {\n      return _register.call(this, 'is', arguments);\n    }\n    /**\n     * Rule to whitelist words to be used as password\n     *\n     * @param {array} list - list of values allowed\n     * @param {string} [description] - description of the validation\n     * @returns {PasswordValidator} instance of PasswordValidator schema\n     */\n\n  }, {\n    key: \"oneOf\",\n    value: function oneOf(list, description) {\n      return _register.call(this, 'oneOf', arguments);\n    }\n    /**\n     * Insert a plugin function into the validation chain\n     *\n     * @param {Plugin} fn  - A plugin function\n     * @param {string} [description] - description of the validation\n     * @returns {PasswordValidator} instance of PasswordValidator schema\n     */\n\n  }, {\n    key: \"usingPlugin\",\n    value: function usingPlugin(fn, description) {\n      if (typeof fn !== 'function') {\n        throw new Error(error.invalidPlugin);\n      }\n\n      return _register.call(this, 'usingPlugin', arguments);\n    }\n  }]);\n\n  return PasswordValidator;\n}();\n\nmodule.exports = PasswordValidator;\n/**\n * @callback Plugin\n * @param password Password injected by the library\n */","map":null,"metadata":{},"sourceType":"script"}