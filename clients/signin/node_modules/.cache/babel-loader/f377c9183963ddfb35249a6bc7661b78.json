{"ast":null,"code":"module.exports = function (method, arg, inverted) {\n  var msgList = inverted ? negativeMessages : positiveMessages;\n  return msgList[method] && msgList[method](arg);\n};\n\nvar positiveMessages = {\n  min: function min(num) {\n    return \"The string should have a minimum length of \".concat(num, \" character\").concat(pluralify(num));\n  },\n  max: function max(num) {\n    return \"The string should have a maximum length of \".concat(num, \" character\").concat(pluralify(num));\n  },\n  letters: function letters() {\n    var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return \"The string should have a minimum of \".concat(num, \" letter\").concat(pluralify(num));\n  },\n  digits: function digits() {\n    var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return \"The string should have a minimum of \".concat(num, \" digit\").concat(pluralify(num));\n  },\n  uppercase: function uppercase() {\n    var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return \"The string should have a minimum of \".concat(num, \" uppercase letter\").concat(pluralify(num));\n  },\n  lowercase: function lowercase() {\n    var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return \"The string should have a minimum of \".concat(num, \" lowercase letter\").concat(pluralify(num));\n  },\n  symbols: function symbols() {\n    var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return \"The string should have a minimum of \".concat(num, \" symbol\").concat(pluralify(num));\n  },\n  spaces: function spaces() {\n    var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return \"The string should have a minimum of \".concat(num, \" space\").concat(pluralify(num));\n  },\n  oneOf: function oneOf(list) {\n    return \"The string should be \".concat(list.length > 1 ? \"one of \".concat(list.slice(0, -1).join(', '), \" and \") : '').concat(list[list.length - 1]);\n  },\n  has: function has(pattern) {\n    return \"The string should have pattern '\".concat(pattern, \"'\");\n  },\n  not: function not(pattern) {\n    return \"The string should not have pattern '\".concat(pattern, \"'\");\n  },\n  usingPlugin: function usingPlugin(fn) {\n    return \"The string should not violate \".concat(fn.name || 'plugin');\n  }\n};\nvar negativeMessages = {\n  min: function min(num) {\n    return \"The string should have a maximum length of \".concat(num, \" character\").concat(pluralify(num));\n  },\n  max: function max(num) {\n    return \"The string should have a minimum length of \".concat(num, \" character\").concat(pluralify(num));\n  },\n  letters: function letters() {\n    var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return \"The string should \".concat(num === 0 ? 'not have' : \"have a maximum of \".concat(num), \" letter\").concat(pluralify(num));\n  },\n  digits: function digits() {\n    var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return \"The string should \".concat(num === 0 ? 'not have' : \"have a maximum of \".concat(num), \" digit\").concat(pluralify(num));\n  },\n  uppercase: function uppercase() {\n    var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return \"The string should \".concat(num === 0 ? 'not have' : \"have a maximum of \".concat(num), \" uppercase letter\").concat(pluralify(num));\n  },\n  lowercase: function lowercase() {\n    var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return \"The string should \".concat(num === 0 ? 'not have' : \"have a maximum of \".concat(num), \" lowercase letter\").concat(pluralify(num));\n  },\n  symbols: function symbols() {\n    var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return \"The string should \".concat(num === 0 ? 'not have' : \"have a maximum of \".concat(num), \" symbol\").concat(pluralify(num));\n  },\n  spaces: function spaces() {\n    var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return \"The string should \".concat(num === 0 ? 'not have' : \"have a maximum of \".concat(num), \" space\").concat(pluralify(num));\n  },\n  oneOf: function oneOf(list) {\n    return \"The string should not be \".concat(list.length > 1 ? \"one of \".concat(list.slice(0, -1).join(', '), \" and \") : '').concat(list[list.length - 1]);\n  },\n  has: function has(pattern) {\n    return \"The string should not have pattern '\".concat(pattern, \"'\");\n  },\n  not: function not(pattern) {\n    return \"The string should have pattern '\".concat(pattern, \"'\");\n  },\n  usingPlugin: function usingPlugin(fn) {\n    return \"The string should violate \".concat(fn.name || 'plugin');\n  }\n};\n\nfunction pluralify(num) {\n  return num === 1 ? '' : 's';\n}","map":null,"metadata":{},"sourceType":"script"}